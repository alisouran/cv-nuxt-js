@use "sass:list";

$grid-columns: 12;
$grid-break-points: (
  xl: 2160px,
  lg: 1768px,
  md: 1032px,
  sm: 768px,
  xs: 540px,
  xxs: 325px,
);
$container-max-widths: (
  xl: 2160px,
  lg: 1768px,
  md: 1032px,
  sm: 768px,
  xs: 540px,
  xxs: 325px,
);
$container-gutters: (
  xxs: 16px,
  xs: 16px,
  sm: 24px,
  md: 32px,
  lg: 40px,
  xl: 48px,
);

:root {
  --container-max-width: 1032px;

  --grid-columns: 12;
  --grid-gutter-xs: 0px;
  --grid-gutter-sm: 16px;
  --grid-gutter-md: 16px;
  --grid-gutter-lg: 24px;
  --grid-gutter-xl: 24px;
}

@mixin container-generator {
  @each $key, $val in $container-max-widths {
    @if ($val == 303px) {
      @media screen and (max-width: #{$val}) {
        .container {
          max-width: 304px;
          padding-left: var(--container-gutter-#{$key});
          padding-right: var(--container-gutter-#{$key});
        }
      }
    } @else {
      @media screen and (max-width: #{$val}) {
        @if ($val > 1280px) {
          .container {
            max-width: 1280px;
            padding-left: var(--container-gutter-#{$key});
            padding-right: var(--container-gutter-#{$key});
            &-fluid {
              max-width: 100%;
              width: 100%;
              padding: 0%;
            }
          }
        } @else {
          .container {
            max-width: 100%;
            padding-left: var(--container-gutter-#{$key});
            padding-right: var(--container-gutter-#{$key});
            &-fluid {
              max-width: 100%;
              width: 100%;
              padding: 0%;
            }
          }
        }
      }
    }
  }
}

@mixin container-breakpoints-generator {
  @each $key, $val in $container-max-widths {
    @each $key2, $val2 in $container-max-widths {
      @if ($val2 < $val) {
        @media screen and (max-width: #{$val}) {
          .container-#{$key2} {
            max-width: $val2;
            padding: 0%;
            margin-left: auto;
            margin-right: auto;
          }
        }
      }
    }
  }
}

.container {
  width: 100%;
  max-width: var(--container-max-width);
  margin-left: auto;
  margin-right: auto;
}

@include container-generator();
@include container-breakpoints-generator();

.row {
  & > * {
    flex-shrink: 0;
    max-width: 100%;
  }
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  &.align-center {
    align-items: center;
  }
  &--reverse {
    flex-direction: row-reverse;
  }
}

.row::after {
  content: '';
  clear: both;
  margin-right: 0;
  margin-left: 0;
}

.column {
  flex-direction: column;
  &--reverse {
    flex-direction: column-reverse;
  }
}

@mixin col-loop($key) {
  @for $i from 1 through $grid-columns {
    .col-#{$key}-#{$i} {
      width: calc((100% / var(--grid-columns)) * #{$i});
    }
  }
}

@mixin col-generator {
  @each $key, $val in $grid-break-points {
    @media screen and (max-width: #{$val}) {
      @include col-loop($key);
    }
  }
}

[class^='col-'] {
  float: left;
  flex: 0 0 auto;
  width: 100%;
}

@include col-generator();

$i: 1;
@each $key, $val in $container-gutters {
  .g-#{$i} {
    padding: $val;
  }
  $i: $i + 1;
}
$i: 1;
@each $key, $val in $container-gutters {
  .gx-#{$i} {
    padding-left: $val;
    padding-right: $val;
  }
  $i: $i + 1;
}
$i: 1;
@each $key, $val in $container-gutters {
  .gy-#{$i} {
    padding-top: $val;
    padding-bottom: $val;
  }
  $i: $i + 1;
}
